 private static String createSession() throws IOException {
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost post = new HttpPost(LIVY_URL + "/sessions");

            // Create the session request JSON payload
            String jsonPayload = "{"
                    + "\"kind\": \"spark\","
                    + "\"conf\": {\"spark.executor.memory\": \"1g\", \"spark.driver.memory\": \"1g\"}"
                    + "}";

            StringEntity entity = new StringEntity(jsonPayload);
            post.setEntity(entity);
            post.setHeader("Content-Type", "application/json");

            try (CloseableHttpResponse response = httpClient.execute(post)) {
                HttpEntity responseEntity = response.getEntity();
                String responseString = EntityUtils.toString(responseEntity);
                System.out.println("Session response: " + responseString);

                // Extract session ID from the response (for simplicity, we assume response contains sessionId)
                String sessionId = responseString.split("\"id\":")[1].split(",")[0];
                return sessionId.trim();
            }
        }
    }


try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost post = new HttpPost(LIVY_URL + "/sessions/" + sessionId + "/statements");

            // Create the job (query) to run in Spark
            String jsonPayload = "{"
                    + "\"code\": \"spark.sql(\\\"SELECT * FROM my_table LIMIT 10\\\").show()\""
                    + "}";

            StringEntity entity = new StringEntity(jsonPayload);
            post.setEntity(entity);
            post.setHeader("Content-Type", "application/json");

            try (CloseableHttpResponse response = httpClient.execute(post)) {
                HttpEntity responseEntity = response.getEntity();
                String responseString = EntityUtils.toString(responseEntity);
                System.out.println("Job response: " + responseString);

                // Extract the statement ID from the response
                String statementId = responseString.split("\"id\":")[1].split(",")[0];
                return statementId.trim();
            }
        }


private static String checkSessionStatus(String sessionId) throws IOException {
    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
        HttpGet get = new HttpGet(LIVY_URL + "/sessions/" + sessionId);
        try (CloseableHttpResponse response = httpClient.execute(get)) {
            HttpEntity responseEntity = response.getEntity();
            String responseString = EntityUtils.toString(responseEntity);
            System.out.println("Session status response: " + responseString);

            // Parse session state from the response
            if (responseString.contains("\"state\": \"starting\"")) {
                return "Session is starting, retrying...";
            } else if (responseString.contains("\"state\": \"idle\"")) {
                return "Session is idle and ready.";
            } else if (responseString.contains("\"state\": \"running\"")) {
                return "Session is running.";
            } else if (responseString.contains("\"state\": \"error\"")) {
                return "Session failed to start.";
            }
            return "Unknown session state.";
        }
    }
}

private static String checkJobStatus(String sessionId, String statementId) throws IOException {
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet get = new HttpGet(LIVY_URL + "/sessions/" + sessionId + "/statements/" + statementId);

            try (CloseableHttpResponse response = httpClient.execute(get)) {
                HttpEntity responseEntity = response.getEntity();
                String responseString = EntityUtils.toString(responseEntity);
                System.out.println("Job status response: " + responseString);

                if (responseString.contains("\"state\": \"available\"")) {
                    return "Job complete!";
                }
                return "Job still running...";
            }
        }
    }

String status = checkJobStatus(sessionId, statementId);
        while (!status.equals("Job complete!")) {
            Thread.sleep(5000);  // Check every 5 seconds
            status = checkJobStatus(sessionId, statementId);
        }
